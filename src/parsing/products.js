const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../../.env') });
const axios = require('axios');
const cheerio = require('cheerio');
const { Cluster } = require('puppeteer-cluster');
const fs = require('fs');
const puppeteer = require('puppeteer');
const UserAgent = require('user-agents');
const PQueue = require('p-queue').default;

const userAgent = new UserAgent().toString();
const queue = new PQueue({ concurrency: 3 });

console.log(process.env.LOGIN)
console.log(process.env.PASSWORD)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'https://zepro.pro';
const LOGIN_URL = BASE_URL + '/en/';
const SUBCATEGORIES_URL = BASE_URL + '/en/auto-dalas/';
const COOKIES_FILE = path.join(__dirname, 'cookies.json');
const OUTPUT_FILE = 'products.json';
const MAX_TEST_CATEGORIES = 2; // –¢–µ—Å—Ç: —Ç–æ–ª—å–∫–æ 1 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
const MAX_TEST_PRODUCTS = 10;   // –¢–µ—Å—Ç: —Ç–æ–ª—å–∫–æ 3 —Ç–æ–≤–∞—Ä–∞

const CREDS = {
  email: process.env.LOGIN,
  password: process.env.PASSWORD
};

// 1. –õ–æ–≥–∏–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫
async function loginAndSaveCookies() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  const browser = await puppeteer.launch({
    headless: false,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-web-security',
      '--disable-features=IsolateOrigins,site-per-process'
    ],
    ignoreHTTPSErrors: true
  });

  const page = await browser.newPage();
  await page.setViewport({ width: 1200, height: 800 });

  try {
    console.log(`üåê –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞: ${LOGIN_URL}`);
    await page.goto(LOGIN_URL, {
      waitUntil: 'networkidle2',
      timeout: 60000
    });

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    await page.screenshot({ path: 'before_login.png' });

    console.log('üîë –í–≤–æ–∂—É —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    await page.type('#email', CREDS.email, { delay: 50 });
    await page.type('#pass', CREDS.password, { delay: 50 });

    // –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    await page.screenshot({ path: 'before_submit.png' });

    console.log('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ä–º—É...');
    await Promise.all([
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 }),
      page.click('#submit_login')
    ]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
    const loginError = await page.$('.error-message');
    if (loginError) {
      const errorText = await page.evaluate(el => el.textContent, loginError);
      throw new Error(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${errorText}`);
    }

    // –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    await page.screenshot({ path: 'after_login.png' });

    const cookies = await page.cookies();
    fs.writeFileSync(COOKIES_FILE, JSON.stringify(cookies, null, 2));
    console.log(`üç™ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${COOKIES_FILE}`);

    return cookies;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    await page.screenshot({ path: 'login_error.png' });
    throw error;
  } finally {
    await browser.close();
  }
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuth() {
  if (!fs.existsSync(COOKIES_FILE)) return false;

  try {
    const cookies = JSON.parse(fs.readFileSync(COOKIES_FILE, 'utf-8'));
    const browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();

    await page.setCookie(...cookies);
    await page.goto(BASE_URL, { waitUntil: 'domcontentloaded', timeout: 30000 });

    const authCheck = await page.$('.user-profile');
    await browser.close();
    return !!authCheck;
  } catch (e) {
    return false;
  }
}

// 2. –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function getSubcategories() {
  console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
  try {
    const { data } = await axios.get(SUBCATEGORIES_URL, {
      headers: { 'User-Agent': userAgent },
      timeout: 10000
    });

    const $ = cheerio.load(data);
    const subcategories = [];

    $('.CmListSectBl ul.CmListSect li a').each((_, el) => {
      const url = BASE_URL + $(el).attr('href');
      if (url) {
        subcategories.push({
          name: $(el).text().trim(),
          url: url
        });
      }
    });

    console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ ${subcategories.length} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    return subcategories.slice(0, MAX_TEST_CATEGORIES);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    throw error;
  }
}

// 3. –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
async function getProductLinks(subcategoryUrl) {
  console.log(`üõí –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ ${subcategoryUrl}`);
  try {
    const { data } = await axios.get(subcategoryUrl, {
      headers: { 'User-Agent': userAgent },
      timeout: 10000
    });

    const $ = cheerio.load(data);
    const links = [];

    $('a.CmNameInfoWrapBl').each((_, el) => {
      const href = $(el).attr('href');
      if (href) links.push(BASE_URL + href);
    });

    console.log(`üîó –ù–∞–π–¥–µ–Ω–æ ${links.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    return links.slice(0, MAX_TEST_PRODUCTS);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    throw error;
  }
}

// 4. –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞
async function parseProduct(cluster, productUrl, categoryName) {
  console.log(`üîé –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞: ${productUrl}`);
  try {
    return await cluster.execute(productUrl, async ({ page, data: url }) => {
      console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞...`);
      await page.goto(url, { 
        waitUntil: 'domcontentloaded', 
        timeout: 20000 
      });

      console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...`);
      const data = await page.evaluate(() => {
        return {
          name: document.querySelector('.cmProdName')?.textContent?.trim() || null,
          price: document.querySelector('.CmPriceNum span')?.textContent?.trim() || null,
          url: window.location.href
        };
      });

      return { 
        ...data, 
        category: categoryName,
        timestamp: new Date().toISOString()
      };
    });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${productUrl}:`, error);
    return null;
  }
}

// 5. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
(async () => {
  console.log('üü¢ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...');
  let cluster;

  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const isAuthenticated = await checkAuth();
    
    if (!isAuthenticated) {
      console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      await loginAndSaveCookies();
    } else {
      console.log('‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    if (!fs.existsSync(COOKIES_FILE)) {
      console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
      await loginAndSaveCookies();
    }
    const cookies = JSON.parse(fs.readFileSync(COOKIES_FILE, 'utf-8'));
    console.log('üîë –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    // –ë. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ Puppeteer...');
    cluster = await Cluster.launch({
      concurrency: Cluster.CONCURRENCY_PAGE,
      maxConcurrency: 2, // –ú–∏–Ω–∏–º—É–º –¥–ª—è —Ç–µ—Å—Ç–∞
      puppeteerOptions: { 
        headless: false, // –í–∏–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å
        timeout: 30000,
        args: ['--no-sandbox']
      },
      timeout: 30000,
      workerCreationDelay: 2000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
      retryLimit: 1,
      retryDelay: 5000
    });

    // –í. –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–∫
    await cluster.task(async ({ page }) => {
      await page.setCookie(...cookies);
      await page.setUserAgent(userAgent);
      await page.setViewport({ width: 1280, height: 800 });
    });

    // –ì. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const subcategories = await getSubcategories();
    const allProducts = [];

    for (const subcat of subcategories) {
      console.log(`\nüìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${subcat.name}`);
      const productLinks = await getProductLinks(subcat.url);
    
      const tasks = productLinks.map(link => queue.add(async () => {
        const product = await parseProduct(cluster, link, subcat.name);
        if (product) {
          allProducts.push(product);
          fs.writeFileSync(OUTPUT_FILE, JSON.stringify(allProducts, null, 2));
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${product.name}`);
        }
        await new Promise(resolve => setTimeout(resolve, 800)); // –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
      }));
    
      await Promise.all(tasks); // –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
    }

    // –î. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (allProducts.length > 0) {
      fs.writeFileSync(OUTPUT_FILE, JSON.stringify(allProducts, null, 2));
      console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${OUTPUT_FILE}`);
      console.log('–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', allProducts[0]);
    } else {
      console.log('\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }

  } catch (error) {
    console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    if (cluster) await cluster.close();
    process.exit();
  }
})();